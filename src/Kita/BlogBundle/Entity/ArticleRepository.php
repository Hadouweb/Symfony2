<?php

namespace Kita\BlogBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * ArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends EntityRepository
{
    
    public function getArticles($nombreParPage, $page)
    {
        
        if($page < 1) {
            throw new \InvalidArgumentException('L\'argument $page ne peut être inférieur à 1 (valeur : "'.$page.'").');
        }
        
        $query = $this->createQueryBuilder('a')
                      ->leftJoin('a.image', 'i')
                      ->addSelect('i')
                      ->leftJoin('a.categories', 'c')
                      ->addSelect('c')
                      ->orderBy('a.date', 'DESC')
                      ->getQuery();
        
        $query->setFirstResult(($page-1) * $nombreParPage)
              ->setMaxResults($nombreParPage);
        
        return new Paginator($query);
        
    }
    
    public function myFindAll()
    {
        $queryBuilder = $this->createQueryBuilder('a');

        $queryBuilder = $this->_em->createQueryBuilder()
                             ->select('a')
                             ->from($this->_entityName, 'a');

        $query = $queryBuilder->getQuery();

        $resultats = $query->getResult();

        return $resultats;
    }
    
    public function myFindOne($id)
    {
        $qb = $this->_em->createQueryBuilder();
        
        $qb->select('a')->from('KitaBlogBundle:Article', 'a')
           ->where('a.id = :id')->setParamater('id', $id);
        
        return $qb->getQuery()->getResult();
    }
    
    public function findByAuteurAndDate($auteur, $annee)
    {
        $qb = $this->createQueryBuilder('a');
        
        $qb->where('a.auteur = :ateur')->setParameter('auteur', $auteur)
           ->andWhere('a.date < :annee')->setParameter('annee', $annee)
           ->orderBy('a.date', 'DESC');
        
        return $qb->getQuery()->getResult();
    }
    
    public function whereCurrentYear(\Doctrine\ORM\QueryBuilder $qb)
    {
        $qb->andWhere('a.date BETWEEN :debut AND :fin')
           ->setParameter('debut', new \Datetime(date('Y').'-01-01'))
           ->setParameter('fin', new \Datetime(date('Y').'-12-31'));
        
        return $qb;
    }
    
    public function myFind()
    {
        $qb = $this->createQueryBuilder('a');
        
        $qb->where('a.auteur = :auteur')
           ->setParameter('auteur', 'winzou');
        
        $qb = $this->whereCurrentYear($qb);
        
        $qb->orderBy('a.date', 'DESC');
        
        return $qb->getQuery()->getResult();
    }
    
    public function getArticleAvecCommentaires()
    {
        $qb = $this->createQueryBuilder('a')->leftJoin('a.commentaires', 'c')->addSelect('c');
        
        return $qb->getQuery()->getResult();
    }
    
    public function getAvecCategories(array $nom_categories)
    {
        $qb = $this->createQueryBuilder('a');
        
        $qb->join('a.categories', 'c')
           ->where($qb->expr()->in('c.nom', $nom_categories));
        
        return $qb->getQuery()->getResult();
    }
    
}
